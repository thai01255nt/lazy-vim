# Step 3: Implementation Review

## Context Check
**Checking for step-1 context in this chat session...**

If no step-1 context found:
‚ö†Ô∏è **Missing Context**: No step-1 context detected. Please run step-1-context first, then rerun step-3-review.

## Purpose
Review implementation against established patterns, planning decisions, and quality standards.

## Process
1. **Load Context** ‚Üí Use step-1 context or specified planning file
2. **Analyze Implementation** ‚Üí Compare user's implementation against skeleton and patterns
3. **Validate Patterns** ‚Üí Ensure consistency with existing codebase
4. **Suggest Improvements** ‚Üí Recommend optimizations and corrections

## Review Areas

### Pattern Consistency
- Compare against existing similar implementations
- Verify naming conventions match codebase patterns
- Check architectural pattern adherence
- Validate integration with existing services

### Code Quality
- Error handling follows project patterns
- Logging uses established format and levels
- Dependencies properly injected
- Resource cleanup implemented
- Security considerations addressed

### Planning Alignment
- Implementation matches planning decisions
- All planned components included
- Integration points properly implemented
- Requirements satisfied

## Quality Validation (Auto-Applied)
- [ ] Error handling matches project patterns
- [ ] Logging follows established format and levels
- [ ] Dependencies properly injected following existing patterns
- [ ] Code consistency with existing implementations
- [ ] Security considerations addressed
- [ ] Performance implications considered
- [ ] Resource cleanup (connections, file handles, etc.)

## Planning Updates
Highlight any planning updates needed:
```
üîÑ PLANNING UPDATE: [Description of what needs to be added/changed in planning file]
```

## Output Format
### Review Summary
- Overall assessment of implementation quality
- Adherence to planning and patterns
- Key strengths and areas for improvement

### Specific Recommendations
- Concrete suggestions for improvements
- Code examples for corrections
- Performance optimization opportunities
- Security enhancements

### Next Steps
- Priority order for addressing feedback
- Integration guidance
- Testing recommendations