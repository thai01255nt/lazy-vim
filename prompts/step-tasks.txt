# Step: Tasks Generation

## Context Requirement
**AUTO-DETECT PLANNING FILE** - Analyze user's feature request to determine planning file:

1. **Extract feature context** from user request
2. **Auto-suggest planning filename** following git branch naming: `[type]-[feature-name].md`
3. **Scan `.claude/custom/planning/`** for the suggested file
4. **If found**: 🛑 **STOP** - Ask confirmation "Found `feat-user-auth.md`, use this planning file? (Y/n)"
5. **WAIT** for user response before proceeding
6. **If confirmed**: Load and proceed with tasks generation
7. **If not found**: 🛑 **STOP** - Ask user to create planning file first: "Planning file not found. Please run planning step first for this feature."

## Purpose
Generate or update tasks file from planning file, breaking down feature planning into actionable tasks in `.claude/custom/tasks/` folder.

## Process
1. **Load Planning File** → Read from `.claude/custom/planning/[name].md`
2. **Check Existing Tasks** → Look for `.claude/custom/tasks/[name].md`
3. **Compare & Analyze** → Compare planning vs existing tasks to identify changes
4. **Task Management** → Add new tasks, remove obsolete tasks, update existing tasks
5. **Preserve Progress** → Keep completed tasks and active work status
6. **Update Tasks File** → Save updated task breakdown with changes highlighted


## Task Generation & Management Rules

### Task Status System
- `[ ]` TODO → `[⏳]` IN PROGRESS → `[x]` COMPLETED
- `[⏸️]` BLOCKED (waiting on dependency)  
- `[❌]` CANCELLED (no longer needed)

### From Planning Components
- **Components** → Implementation tasks (use `[ ]` TODO status)
- **Integration points** → Integration tasks with dependencies
- **Testing strategy** → Testing tasks linked to implementation
- **Documentation** → Documentation tasks for each component

### Task Rules
- **New tasks**: Always start as `[ ]` TODO
- **Break down large tasks**: Max 1-3 days each
- **Include acceptance criteria**: From planning requirements
- **Set dependencies**: Link related tasks
- **Estimate effort**: Based on component complexity

### For Existing Tasks File
- **Preserve Progress**: Keep `[x]` completed, `[⏳]` in progress, `[⏸️]` blocked tasks
- **Add new tasks**: As `[ ]` TODO from planning changes
- **Mark obsolete tasks**: As `[❌]` CANCELLED in place
- **Change Highlighting**: `🆕 NEW`, `📝 UPDATED`, `❌ OBSOLETE`

### Template Reference
Use `TASKS-TEMPLATE.md` as the base structure for all generated tasks files.


## Output Format
### For New Tasks File
- Complete task breakdown from planning with `[ ]` TODO checkboxes
- Flat "Tasks" section with all tasks
- Clear task dependencies and blocked relationships
- Time estimates and acceptance criteria included

### For Updated Tasks File
- Summary of changes made with change indicators
- New `[ ]` tasks added to flat "Tasks" section
- Status preserved: `[x]` completed, `[⏳]` in progress, `[⏸️]` blocked
- Obsolete tasks converted to `[❌]` CANCELLED in place

### Example Output
```
🆕 NEW: [ ] Implement OAuth2 token validation
📝 UPDATED: [⏳] User registration - now includes email verification  
❌ OBSOLETE: [❌] Basic auth login - moved to cancelled section
```