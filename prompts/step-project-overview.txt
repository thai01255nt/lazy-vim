# Step: Project Overview Generator (4-Step Process)

## Purpose
Generate focused project documentation system with 4 essential files in docs/ folder through a structured 4-step process. Each step focuses on one file with specific context analysis. Documentation will be concise, avoid redundancy, and focus on unique information per file.

## Additional Required Documentation
**When updating existing docs (load IF NOT already in context):**
- **docs/DEVELOPER-GUIDE.md** ‚Üí For testing framework and workflow info
- **docs/CODING-STANDARDS.md** ‚Üí For existing patterns and conventions  
- **docs/CODEBASE-REFERENCE.md** ‚Üí For existing code inventory

**Note**: These are loaded for content analysis and updates when they exist. For new generation, they will be created from scratch.

## MANDATORY Process

### 1. Template Check (REQUIRED FIRST)
**üõë BEFORE ANY PROCESSING:**
1. **CHECK TEMPLATE**: Search for PROJECT-DOCS-TEMPLATES.md in context
2. **IF TEMPLATE NOT FOUND**: üõëüõëüõë **ABSOLUTE STOP** - Ask user:
   "‚ùå PROJECT-DOCS-TEMPLATES.md NOT FOUND in context.
   üö´ CANNOT PROCEED without template.
   ‚ö° REQUIRED ACTION: Please provide PROJECT-DOCS-TEMPLATES.md first."
3. **NEVER PROCEED** without template - NO EXCEPTIONS

### 2. Check docs/ Folder Structure
**After template confirmed:**
1. **CHECK docs/ folder existence** ‚Üí Create if missing
2. **SCAN for 4 required files**:
   - `docs/PROJECT-OVERVIEW.md` (Business & architecture)
   - `docs/DEVELOPER-GUIDE.md` (Setup & workflow)
   - `docs/CODING-STANDARDS.md` (Conventions & patterns)
   - `docs/CODEBASE-REFERENCE.md` (Classes & functions)

### 3. File Status Detection & User Input
**IF ANY FILES MISSING (First Time Setup):**
üõëüõëüõë **ABSOLUTE STOP** - **FORCE USER INPUT** - Ask user:
```
‚ùå Missing project documentation files: [LIST_MISSING_FILES]
üö´ CANNOT PROCEED without project description.
‚ö° REQUIRED ACTION: Please provide:

1. **Project Purpose**: What does this project do?
2. **Main Goals**: What problems does it solve?
3. **Target Users**: Who will use this project?
4. **Key Features**: What are the main features?
5. **Business Context**: Any domain-specific information?

(This will be used in Step 4.1 to generate PROJECT-OVERVIEW.md)
```
**WAIT** for complete user response - **DO NOT PROCEED** to Step 4.1 without it.

**IF ALL FILES EXIST:**
üõë **STOP** - Ask user:
```
‚úÖ All documentation files exist. Choose action:
1. **Update specific file** (1-4) - specify which file and run corresponding step
2. **Sync all with codebase** - run all 4 steps to update dynamic sections
3. **Full regeneration** - recreate from scratch using 4-step process
4. **Add missing sections** - detect and fill gaps

Which option? (1/2/3/4)
```
**WAIT** for user choice.

### 4. Four-Step Generation Process

**üîÑ PROCESS: Generate files in sequence, one at a time**

#### **Step 4.1: Generate PROJECT-OVERVIEW.md**
**Sub-steps:**
1. **Load Template**: Ensure PROJECT-OVERVIEW template from PROJECT-DOCS-TEMPLATES.md
2. **Load User Input**: Project description, goals, features from step 3
3. **Tech Stack Analysis**: 
   - Read package.json, requirements.txt, composer.json
   - Identify main language and framework
   - List core technologies only
4. **Architecture Scan**:
   - Check folder structure (src/, app/, lib/, etc.)
   - Identify organization pattern (MVC, layered, etc.)
   - Map main components and their relationships
   - Analyze data flow between modules
5. **Mermaid Diagram Generation**:
   - **System Architecture**: Create high-level component diagram showing main modules
   - **Data Flow**: Generate flowchart for key business processes
   - **Dependencies**: Show relationships between layers (frontend, backend, database)
   - **API Flow**: Create sequence diagram for main user interactions
   - **Use Mermaid syntax**: graph TD, flowchart, sequenceDiagram, classDiagram as appropriate
6. **Generate File**: PROJECT-OVERVIEW.md (Max 350 lines)
   - Project description + user input
   - Tech stack summary
   - High-level architecture description
   - **Mermaid architecture diagrams** (system overview + data flow)
   - Key features list
   - Quick start commands

#### **Step 4.2: Generate DEVELOPER-GUIDE.md**
**Sub-steps:**
1. **Load Template**: Ensure DEVELOPER-GUIDE template from PROJECT-DOCS-TEMPLATES.md
2. **Load Previous**: Read PROJECT-OVERVIEW.md for tech stack context
3. **Package Analysis**:
   - Extract scripts from package.json/Makefile/composer.json
   - Identify install, build, dev, test commands
   - Check engines and system requirements
4. **Workflow Detection**:
   - Analyze development workflow patterns
   - Identify testing framework (Jest, PHPUnit, pytest)
   - Find common development tasks
5. **Generate File**: DEVELOPER-GUIDE.md (Max 200 lines)
   - Quick start (reference DEPENDENCIES-GUIDE for details)
   - Prerequisites
   - Development workflow
   - Testing commands
   - Common tasks
   - Troubleshooting

#### **Step 4.3: Generate CODING-STANDARDS.md**
**Sub-steps:**
1. **Load Template**: Ensure CODING-STANDARDS template from PROJECT-DOCS-TEMPLATES.md
2. **Load Previous**: Read PROJECT-OVERVIEW.md for language/framework context
3. **Naming Analysis**:
   - Scan file names for patterns (camelCase, snake_case, kebab-case)
   - Analyze variable/function naming in 2-3 sample files
   - Identify class/interface naming conventions
4. **Pattern Detection**:
   - Find 1-2 examples of functions, classes
   - Identify error handling patterns (try-catch, custom errors)
   - Analyze code structure patterns
5. **Generate File**: CODING-STANDARDS.md (Max 150 lines)
   - Naming conventions (detected from codebase)
   - File organization structure
   - Core code patterns (1-2 examples max)
   - Error handling pattern
   - Testing structure

#### **Step 4.4: Generate CODEBASE-REFERENCE.md**
**Sub-steps:**
1. **Load Template**: Ensure CODEBASE-REFERENCE template from PROJECT-DOCS-TEMPLATES.md
2. **Load Previous**: Read PROJECT-OVERVIEW.md and CODING-STANDARDS.md for context
3. **Code Inventory**:
   - Smart scan for classes, interfaces, types (prioritize main/public ones)
   - Extract method signatures and purposes efficiently
   - Group by logical modules/layers (models, services, controllers, etc.)
   - Focus on public APIs and essential internal components
4. **API Analysis**:
   - Quick scan for route definitions and controller methods
   - Extract endpoint patterns and HTTP methods
   - Identify main API groups/modules
5. **Database Scan**:
   - Scan models for table structures and relationships
   - Extract key fields and constraints
   - Identify main entities and their associations
6. **Generate File**: CODEBASE-REFERENCE.md (Max 150 lines)
   - **Class inventory tables** (class, location, purpose, key methods)
   - **Function catalog tables** (function, location, purpose, signature)
   - **API endpoints tables** (method, endpoint, purpose, auth)
   - **Database schema table** (table, purpose, key columns, relationships)
   - **Constants list** (key settings and enums)
   - **Focus on quick reference** - LLM can quickly find and reuse existing code

**Generation Strategy for CODEBASE-REFERENCE.md:**
- **Table-First Approach**: All content in concise table format
- **Essential Info Only**: Class/Function name, location, purpose, signature/methods
- **No Examples**: Remove usage examples, detailed descriptions
- **Quick Scanning**: LLM can quickly scan tables to find reusable components
- **Categorized Organization**: Group by logical modules (models, services, controllers, utils)
- **Compact Reference**: Maximum information density in minimum space


### 5. Content Generation Strategy

**CRITICAL: Anti-Redundancy Rules (Apply to All Steps)**
- Each file must contain UNIQUE information only
- NO duplicate configuration examples across files
- NO repeated architecture descriptions
- NO overlapping code patterns
- Reference other files instead of duplicating content

**Step-by-Step Execution:**
- **Generate files in sequence 4.1 ‚Üí 4.2 ‚Üí 4.3 ‚Üí 4.4**
- **Complete each step fully before moving to next**
- **Perform required context analysis for each step**
- **Stay within length limits for each file**
- **Reference previously generated files when needed**

**For Updates/Sync:**
- **Static sections**: Preserve user content
- **Dynamic sections**: Update from codebase analysis
- **Smart merge**: Combine existing + new information
- **Validation**: Ensure NO content duplication across files

## Execution Guidelines

**üîÑ MANDATORY: Follow 4-Step Sequence**
1. **Execute Step 4.1** ‚Üí Generate PROJECT-OVERVIEW.md
2. **Execute Step 4.2** ‚Üí Generate DEVELOPER-GUIDE.md
3. **Execute Step 4.3** ‚Üí Generate CODING-STANDARDS.md
4. **Execute Step 4.4** ‚Üí Generate CODEBASE-REFERENCE.md

**For Each Step:**
- **Perform required context analysis** as specified
- **Generate only that file** (don't skip ahead)
- **Stay within length limits**
- **Apply anti-redundancy rules**
- **Reference other files when needed**

## Output Requirements
- All 4 files generated in docs/ folder through 4-step process
- User input properly integrated
- Context analysis complete for each step
- Dynamic sections reflect current code state
- **ZERO content duplication** across files
- Each file stays within length limits
- Cross-file references instead of duplication
- Essential documentation for development workflow

## Content Deduplication Rules
1. **Configuration**: Only in DEVELOPER-GUIDE.md
2. **Architecture**: High-level in PROJECT-OVERVIEW.md, patterns in CODING-STANDARDS.md
3. **Code Examples**: Only in CODEBASE-REFERENCE.md (quick reference format)
4. **Setup Instructions**: Only in DEVELOPER-GUIDE.md
5. **Error Handling**: Pattern in CODING-STANDARDS.md only
6. **Reusable Components**: Only in CODEBASE-REFERENCE.md tables
