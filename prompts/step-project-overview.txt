# Step: Project Overview Generator (Enhanced Multi-File)

## Purpose
Generate comprehensive project documentation system with 6 specialized files in docs/ folder for complete project context.

## Additional Required Documentation
**When updating existing docs (load IF NOT already in context):**
- **docs/DEVELOPER-GUIDE.md** ‚Üí For testing framework and workflow info
- **docs/CODING-STANDARDS.md** ‚Üí For existing patterns and conventions  
- **docs/CODEBASE-REFERENCE.md** ‚Üí For existing code inventory
- **docs/DEPENDENCIES-GUIDE.md** ‚Üí For existing library and service info

**Note**: These are loaded for content analysis and updates when they exist. For new generation, they will be created from scratch.

## MANDATORY Process

### 1. Template Check (REQUIRED FIRST)
**üõë BEFORE ANY PROCESSING:**
1. **CHECK TEMPLATE**: Search for PROJECT-DOCS-TEMPLATES.md in context
2. **IF TEMPLATE NOT FOUND**: üõëüõëüõë **ABSOLUTE STOP** - Ask user:
   "‚ùå PROJECT-DOCS-TEMPLATES.md NOT FOUND in context.
   üö´ CANNOT PROCEED without template.
   ‚ö° REQUIRED ACTION: Please provide PROJECT-DOCS-TEMPLATES.md first."
3. **NEVER PROCEED** without template - NO EXCEPTIONS

### 2. Check docs/ Folder Structure
**After template confirmed:**
1. **CHECK docs/ folder existence** ‚Üí Create if missing
2. **SCAN for 6 required files**:
   - `docs/PROJECT-OVERVIEW.md` (Business & architecture)
   - `docs/DEVELOPER-GUIDE.md` (Setup & workflow)
   - `docs/CODING-STANDARDS.md` (Conventions & patterns)
   - `docs/CODEBASE-REFERENCE.md` (Classes & functions)
   - `docs/DEPENDENCIES-GUIDE.md` (Libraries & integrations)
   - `docs/LLM-CONTEXT.md` (AI-specific context)

### 3. File Status Detection & User Input
**IF ANY FILES MISSING (First Time Setup):**
üõëüõëüõë **ABSOLUTE STOP** - **FORCE USER INPUT** - Ask user:
```
‚ùå Missing project documentation files: [LIST_MISSING_FILES]
üö´ CANNOT PROCEED without project description.
‚ö° REQUIRED ACTION: Please provide:

1. **Project Purpose**: What does this project do?
2. **Main Goals**: What problems does it solve?
3. **Target Users**: Who will use this project?
4. **Key Features**: What are the main features?
5. **Business Context**: Any domain-specific information?

(This is required for generating comprehensive documentation)
```
**WAIT** for complete user response - **DO NOT PROCEED** without it.

**IF ALL FILES EXIST:**
üõë **STOP** - Ask user:
```
‚úÖ All documentation files exist. Choose action:
1. **Update specific file** (1-6) - specify which file
2. **Sync all with codebase** - update dynamic sections
3. **Full regeneration** - recreate from scratch
4. **Add missing sections** - detect and fill gaps

Which option? (1/2/3/4)
```
**WAIT** for user choice.

### 4. Codebase Analysis & Generation
**Auto-scan and generate:**

**Tech Stack Detection:**
- Package files: `package.json`, `requirements.txt`, `composer.json`, `pom.xml`
- Config files: `.env`, `docker-compose.yml`, `tsconfig.json`, `webpack.config.js`
- Framework detection: React, Vue, Django, Laravel, Spring, etc.

**Project Structure Analysis:**
- Folder patterns: `src/`, `lib/`, `app/`, `controllers/`, `services/`, `models/`
- File naming conventions: camelCase, snake_case, PascalCase
- Organization patterns: feature-based, layer-based, domain-based

**Code Pattern Detection:**
- Error handling patterns: try-catch, custom errors, middleware
- Logging patterns: console.log, winston, morgan
- Validation patterns: joi, yup, class-validator
- Authentication patterns: JWT, session, OAuth

**Code Inventory:**
- Classes, interfaces, types
- Functions, methods, utilities
- API endpoints and routes
- Database schemas and models

### 5. Content Generation Strategy

**For Missing Files (First Time):**
1. **PROJECT-OVERVIEW.md**: User description + architecture analysis + templates
2. **DEVELOPER-GUIDE.md**: Setup instructions + workflow detection (fully dynamic)
3. **CODING-STANDARDS.md**: Pattern analysis + style guide + templates
4. **CODEBASE-REFERENCE.md**: Complete code inventory (fully dynamic)
5. **DEPENDENCIES-GUIDE.md**: Library usage + integration guide (fully dynamic)
6. **LLM-CONTEXT.md**: AI patterns + domain terminology + templates

**For Updates/Sync:**
- **Static sections**: Preserve user content
- **Dynamic sections**: Update from codebase analysis
- **Smart merge**: Combine existing + new information
- **Validation**: Ensure consistency across files

## Output Requirements
- All 6 files generated in docs/ folder
- User input properly integrated
- Codebase analysis complete and accurate
- Dynamic sections reflect current code state
- Cross-file consistency maintained
- LLM context optimized for AI assistance