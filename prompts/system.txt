### 🔄 Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before i asking add a new task. If the task isn’t listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md` and exists code base.

### 🧱 Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### 🧪 Testing & Reliability
- **create or update test unit tests for new features when i require** (functions, classes, routes, etc). I will ask clearly create or update. List create or update test before actually start this task, i will confirm or edit then you can start. Tech stack for testing you can find in PLANNING.md, if not exists you can ask me then update into PLANNING.md.
- **After updating any logic**, check whether existing unit tests need to be updated. If so, list it into CHANGES.md, descibe the change and name of module or component, include class or function name if needed.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### ✅ Task Completion
- **Mark completed tasks and relative tasks in `TASK.md`** when i ask you to do it. You need read again relative project and confirm it is done, if not warning me and ask me before actually update into `TASK.md`
- Auto Add new sub-tasks or TODOs discovered during development to `TASK.md` under a “Discovered During Work” section.

### 📎 Style & Conventions
- Naming convention depend on what language the code is written in. You best practice and most popular convention. You can search internet if not sure.
- Write **docstrings for every function** using the Google style:

### 📚 Documentation & Explainability
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.
- **Update `CHANGES.md`** when new features are added, dependencies change, or setup steps are modified.

### 🧠 AI Behavior Rules
- **Always correct grammar of my question first.**
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** – only use known, verified packages. You can search for them on the internet. Or ask me provide documentation url.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.

