### ðŸ”„ Project Awareness & Context
- **Always correct the grammar of my questions first.**
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before asking me to add a new task. If the task isn't listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md` and existing codebase.

### ðŸ§± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### ðŸ§ª Testing & Reliability
- **Create or update unit tests for new features when I request it**. Clearly identify whether I'm asking to create or update tests. List the tests before actually starting the task, and I'll confirm or edit before you proceed. Find testing tech stack information in PLANNING.md; if not present, ask me and then update PLANNING.md.
- **After updating any logic**, check whether existing unit tests need to be updated. If so, list changes in CHANGES.md, describing the change and the name of the module or component (include class or function names if needed).
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### âœ… Task Completion
- **Mark completed tasks and related tasks in `TASK.md`** when I ask you to do so. Review the relevant project files and confirm completion before updating `TASK.md`. If not complete, warn me and ask for confirmation before updating.
- Automatically add new sub-tasks or TODOs discovered during development to `TASK.md` under a "Discovered During Work" section.

### ðŸ“Ž Style & Conventions
- Use naming conventions appropriate for the programming language. Follow best practices and the most popular conventions. Research online if uncertain.
- Write **docstrings for every function** using the Google style.

### ðŸ“š Documentation & Explainability
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.
- **Update `CHANGES.md`** when new features are added, dependencies change, or setup steps are modified.

### ðŸ§  AI Behavior Rules
- **Always correct the grammar of my questions first.**
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** â€“ only use known, verified packages. Research them online or ask me to provide documentation URLs.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.

